library(skrFinal)
usethis::use_mit_license(c("Sijie Chen", "Tianhao Li", "Shuo Wang", "Xiaoyu Wang", "Haoming Yang"))
usethis::use_mit_license(c("Sijie Chen", "Tianhao Li", "Shuo Wang", "Xiaoyu Wang", "Haoming Yang"))
usethis::use_mit_license(c("Sijie Chen", "Tianhao Li", "Shuo Wang", "Xiaoyu Wang", "Haoming Yang"))
usethis::use_mit_license(c("Sijie Chen", "Tianhao Li", "Shuo Wang", "Xiaoyu Wang", "Haoming Yang"))
usethis::use_mit_license(c("Sijie Chen", "Tianhao Li", "Shuo Wang", "Xiaoyu Wang", "Haoming Yang"))
library(skrFinal)
?MSE()
library(skrFinal)
library(skrFinal)
?MSE()
library(skrFinal)
?MSE()
library(skrFinal)
?train_model()
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
splitted = split_data()
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
splitted = split_data()
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
splitted = split_data()
splitted = split_data(filepath="Admission_Predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
splitted = split_data(filepath="Admission_Predict_Ver1.1.csv")
train_model(splitted$train, method="ols")
model_ols = train_model(splitted$train, "ols")
model_ridge = train_model(splitted$train, "ridge")
model_lasso = train_model("splitted$train", "lasso")
model_lasso = train_model(splitted$train, "lasso")
model_comparison(filepath="Admission_predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
model_comparison(filepath="Admission_predict_Ver1.1.csv")
model_comparison(filepath="Admission_predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
model_comparison(filepath="Admission_predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
model_comparison(filepath="Admission_predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
model_comparison(filepath="Admission_predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
model_comparison(filepath="Admission_predict_Ver1.1.csv")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
model_comparison(filepath="Admission_predict_Ver1.1.csv")
model_best = model_comparison(filepath="Admission_predict_ver1.1csv")
model_best = model_comparison(filepath="Admission_predict_Ver1.1csv")
model_best = model_comparison(filepath="Admission_Predict_Ver1.1csv")
model_best = model_comparison(filepath="Admission_Predict_Ver1.1.csv")
library(skrFinal)
split_data("Admission_Predict_Ver1.1.csv")
splitted = split_data("Admission_Predict_Ver1.1.csv")
model_comparison("Admission_Predict_Ver1.1.csv")
?model_comparison()
?train_model()
?split_data
library(shiny)
library(purrr)
library(shinyWidgets)
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
install.packages("ShinyRatingInput")
library(shiny)
library(purrr)
library(shinyWidgets)
devtools::install_github("stefanwilhelm/ShinyRatingInput")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(shiny)
library(purrr)
library(shinyWidgets)
devtools::install_github("stefanwilhelm/ShinyRatingInput")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(shiny)
library(purrr)
library(shinyWidgets)
devtools::install_github("stefanwilhelm/ShinyRatingInput")
install.packages("cli")
install.packages("cli")
library(shiny)
library(purrr)
library(shinyWidgets)
devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison(filepath='Admission_Predict_Ver1.1.csv')
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison(filepath='Admission_Predict_Ver1.1.csv')
#test
personaldata = as.data.frame(t((c(320,100,5.8,3,4,5,1))))
colnames(personaldata) = c('GRE.Score','TOEFL.Score','University.Rating','SOP',
'LOR','CGPA','Research')
result = round(as.numeric(predict(outputmodel,newdata=personaldata)),digits=2)
UI = fluidPage(
setBackgroundImage(
src = "https://wallpapercave.com/wp/ffSWWYe.png"
),
titlePanel(h3("Calculate Your Rate For Entering UCLA!",
style = "color:orange")),
sidebarLayout(
sidebarPanel(
h4("Standard Scores:"),
sliderInput("GRE","Your Current GRE Score is:",min=160,max=340,value=320),
sliderInput("TOEFL","Your  Current TOEFL Score is:",min=1,max=120,value=100),
sliderInput("GPA","Your Current GPA is:",min=0.0,max=10.0,value=8.0,step=0.1),
h4("Background:"),
bootstrapPage(
useShinyjs(),
extendShinyjs(text = jsCode, functions = c("winprint")),
ratingInput("CollegeR", label="Rate Your Undergraduate University", dataStop=5),
htmlOutput("CollegeRout"),
ratingInput("SOP",label="Rate Your Strength of Statement of Purpose", dataStop=5),
htmlOutput("SOPout"),
ratingInput("LOR",label="Rate Your Strength of Letter of Recommendation", dataStop=5),
htmlOutput("LORout"),
checkboxInput("research","Do you have reserach experience?",FALSE),
actionButton("resultbutton","Let's See!")),
),
mainPanel(h3(textOutput("text"),
style="color:orange"))
),
loadEChartsLibrary(),
tags$div(id="comparison", style="width:50%;height:400px;"),
deliverChart(div_id = "comparison")
)
server = function(input, output, session) {
inputdf = reactive({
personaldata = as.data.frame(t(c(as.integer(input$GRE),as.integer(input$TOEFL),
as.integer(input$CollegeR),
as.integer(input$SOP),
as.integer(input$LOR),as.integer(input$GPA),input$research)))
colnames(personaldata) = c('GRE.Score','TOEFL.Score','University.Rating','SOP',
'LOR','CGPA','Research')
personaldata$Research = ifelse(personaldata$Research=='TRUE',1,0)
return(personaldata)
})
rate = eventReactive(input$resultbutton,{
result = round(as.numeric(predict(outputmodel,newdata=inputdf())),digits=2)
return(result)
})
#output RadarChart: how is this specific person doing compared to people whose prob of admission is above 70%
# observeEvent(input$resultbutton, {renderRadarChart(div_id = "comparison",
#                  data = data.frame(
#                    GRE = (input$GRE-min(admis[admis[,"Chance of Admit"] > 0.7,"GRE Score"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"GRE Score"])-min(admis[admis[,"Chance of Admit"] > 0.7,"GRE Score"])),
#                    TOEFL = (input$TOEFL-min(admis[admis[,"Chance of Admit"] > 0.7,"TOEFL Score"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"TOEFL Score"])-min(admis[admis[,"Chance of Admit"] > 0.7,"TOEFL Score"])),
#                    universityRate = (input$CollegeR-min(admis[admis[,"Chance of Admit"] > 0.7,"University Rating"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"University Rating"])-min(admis[admis[,"Chance of Admit"] > 0.7,"University Rating"])),
#                    SOP = (input$SOP-min(admis[admis[,"Chance of Admit"] > 0.7,"SOP"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"SOP"])-min(admis[admis[,"Chance of Admit"] > 0.7,"SOP"])),
#                    LOR = (input$LOR-min(admis[admis[,"Chance of Admit"] > 0.7,"LOR"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"LOR"])-min(admis[admis[,"Chance of Admit"] > 0.7,"LOR"])),
#                    GPA = (input$GPA-min(admis[admis[,"Chance of Admit"] > 0.7,"CGPA"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"CGPA"])-min(admis[admis[,"Chance of Admit"] > 0.7,"CGPA"])),
#                    Research = (input$research-min(admis[admis[,"Chance of Admit"] > 0.7,"Research"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"Research"])-min(admis[admis[,"Chance of Admit"] > 0.7,"Research"]))
#                  ))
# })
output$text = renderText({paste0("Your Probability for Getting into UCLA is: ",rate())})
}
shinyApp(
ui = UI,
server = server
)
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison(filepath='Admission_Predict_Ver1.1.csv')
#test
personaldata = as.data.frame(t((c(320,100,5.8,3,4,5,1))))
colnames(personaldata) = c('GRE.Score','TOEFL.Score','University.Rating','SOP',
'LOR','CGPA','Research')
result = round(as.numeric(predict(outputmodel,newdata=personaldata)),digits=2)
#test
personaldata = as.data.frame(t((c(320,100,5.8,3,4,5,1))))
colnames(personaldata) = c('GRE.Score','TOEFL.Score','University.Rating','SOP',
'LOR','CGPA','Research')
result = round(as.numeric(predict(outputmodel,newdata=personaldata)),digits=2)
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison(filepath='Admission_Predict_Ver1.1.csv')
#test
personaldata = as.data.frame(t((c(320,100,5.8,3,4,5,1))))
colnames(personaldata) = c('GRE.Score','TOEFL.Score','University.Rating','SOP',
'LOR','CGPA','Research')
result = round(as.numeric(predict(outputmodel,newdata=personaldata)),digits=2)
UI = fluidPage(
setBackgroundImage(
src = "https://wallpapercave.com/wp/ffSWWYe.png"
),
titlePanel(h3("Calculate Your Rate For Entering UCLA!",
style = "color:orange")),
sidebarLayout(
sidebarPanel(
h4("Standard Scores:"),
sliderInput("GRE","Your Current GRE Score is:",min=160,max=340,value=320),
sliderInput("TOEFL","Your  Current TOEFL Score is:",min=1,max=120,value=100),
sliderInput("GPA","Your Current GPA is:",min=0.0,max=10.0,value=8.0,step=0.1),
h4("Background:"),
bootstrapPage(
useShinyjs(),
extendShinyjs(text = jsCode, functions = c("winprint")),
ratingInput("CollegeR", label="Rate Your Undergraduate University", dataStop=5),
htmlOutput("CollegeRout"),
ratingInput("SOP",label="Rate Your Strength of Statement of Purpose", dataStop=5),
htmlOutput("SOPout"),
ratingInput("LOR",label="Rate Your Strength of Letter of Recommendation", dataStop=5),
htmlOutput("LORout"),
checkboxInput("research","Do you have reserach experience?",FALSE),
actionButton("resultbutton","Let's See!")),
),
mainPanel(h3(textOutput("text"),
style="color:orange"))
),
loadEChartsLibrary(),
tags$div(id="comparison", style="width:50%;height:400px;"),
deliverChart(div_id = "comparison")
)
server = function(input, output, session) {
inputdf = reactive({
personaldata = as.data.frame(t(c(as.integer(input$GRE),as.integer(input$TOEFL),
as.integer(input$CollegeR),
as.integer(input$SOP),
as.integer(input$LOR),as.integer(input$GPA),input$research)))
colnames(personaldata) = c('GRE.Score','TOEFL.Score','University.Rating','SOP',
'LOR','CGPA','Research')
personaldata$Research = ifelse(personaldata$Research=='TRUE',1,0)
return(personaldata)
})
rate = eventReactive(input$resultbutton,{
result = round(as.numeric(predict(outputmodel,newdata=inputdf())),digits=2)
return(result)
})
#output RadarChart: how is this specific person doing compared to people whose prob of admission is above 70%
# observeEvent(input$resultbutton, {renderRadarChart(div_id = "comparison",
#                  data = data.frame(
#                    GRE = (input$GRE-min(admis[admis[,"Chance of Admit"] > 0.7,"GRE Score"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"GRE Score"])-min(admis[admis[,"Chance of Admit"] > 0.7,"GRE Score"])),
#                    TOEFL = (input$TOEFL-min(admis[admis[,"Chance of Admit"] > 0.7,"TOEFL Score"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"TOEFL Score"])-min(admis[admis[,"Chance of Admit"] > 0.7,"TOEFL Score"])),
#                    universityRate = (input$CollegeR-min(admis[admis[,"Chance of Admit"] > 0.7,"University Rating"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"University Rating"])-min(admis[admis[,"Chance of Admit"] > 0.7,"University Rating"])),
#                    SOP = (input$SOP-min(admis[admis[,"Chance of Admit"] > 0.7,"SOP"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"SOP"])-min(admis[admis[,"Chance of Admit"] > 0.7,"SOP"])),
#                    LOR = (input$LOR-min(admis[admis[,"Chance of Admit"] > 0.7,"LOR"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"LOR"])-min(admis[admis[,"Chance of Admit"] > 0.7,"LOR"])),
#                    GPA = (input$GPA-min(admis[admis[,"Chance of Admit"] > 0.7,"CGPA"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"CGPA"])-min(admis[admis[,"Chance of Admit"] > 0.7,"CGPA"])),
#                    Research = (input$research-min(admis[admis[,"Chance of Admit"] > 0.7,"Research"])) / (max(admis[admis[,"Chance of Admit"] > 0.7,"Research"])-min(admis[admis[,"Chance of Admit"] > 0.7,"Research"]))
#                  ))
# })
output$text = renderText({paste0("Your Probability for Getting into UCLA is: ",rate())})
}
shinyApp(
ui = UI,
server = server
)
?usethis::use_data()
gradApplication = read.csv(Admission_Predict_Ver1.1.csv)
gradApplication = read.csv("Admission_Predict_Ver1.1.csv")
usethis::use_data(gradApplication)
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
library(skrFinal)
gradApplication
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/data.R', echo=TRUE)
install.packages("lattice")
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
library(skrFinal)
gradApplication
?gradApplication
?split_data
?train_model
?model_comparison
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison()
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison()
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
library(skrFinal)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison()
library(skrFinal)
library(shiny)
library(purrr)
library(shinyWidgets)
#devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
library(shinyjs)
library(ECharts2Shiny)
library(skrFinal)
#https://stackoverflow.com/questions/39573258/reset-ratinginput-in-shiny-app
jsCode <-"shinyjs.reset_1 = function(params){$('.rating-symbol-foreground').css('width', params);}"
outputmodel = model_comparison()
?split_data
source('~/rProject/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R', echo=TRUE)
install.packages("roxygen2")
library(skrFinal)
model_comparison()
install.packages("tidyverse")
library(skrFinal)
model_comparison()
%>%
?model_comparison()
library(dyplr)
library(skrFinal)
model_comparison()
library(skrFinal)
model_comparison()
train_model()
source("~/Desktop/R/STA523/final_proj_skr523/skrFinal/R/STA523_Model.R")
model_comparison()
library(skrFinal)
model_comparison()
install.packages("testthat")
library(skrFinal)
model_comparison()
library(skrFinal)
install.packages("diffmatchpatch")
library(skrFinal)
split_data()
logistic()
?logistic()
?model_comparision()
?model_comparison()
